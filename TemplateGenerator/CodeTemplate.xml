<?xml version="1.0" encoding="utf-8" ?>

<codes>
	<new_programId_query>
		<![CDATA[
    --'WEB0101' 기준으로 한 신규 id => WEB0101**
    SELECT CONCAT('WEB0101', 
    (select REPLACE((SELECT MAX(PROGRAM_ID) FROM TB_COR_PROGRAM
    WHERE PROGRAM_TYPE = 'MES_WEB'
    and program_id like 'WEB0101%'
    ), 'WEB0101', '') + 1 from dual
    )) id FROM DUAL    
    ]]>
	</new_programId_query>
	<add_programId_query>
		<![CDATA[
    --Program id 등록 **주의 PROGRAM_PATH**
    INSERT INTO TB_COR_PROGRAM
    (
      PROGRAM_ID
    , PROGRAM_ID_PR
    , PROGRAM_NAME
    , PROGRAM_DESC
    , PROGRAM_SORT_NO
    , PROGRAM_LEVEL
    , PROGRAM_PATH
    , PROGRAM_TYPE
    , PROGRAM_PARAMETER
    , NAMESPACE
    , NO_POPUP_FLAG
    , PROGRAM_USE_FLAG
    , CREATION_USER_ID
    , CREATION_DATE
    , LAST_UPDATE_USER_ID
    , LAST_UPDATE_DATE
    , AUTO_CREATION_FLAG
    , CONFIGURABLE_UI_FLAG
    )
    VALUES
    (
      'NEW_PROGRAM_ID' --PROGRAM_ID
    , 'WEB010100' --PROGRAM_ID_PR
    , 'ko-KR\UI_{0}|zh-CN\UI_{0}|en-US\UI_{0}' --PROGRAM_NAME
    , 'UI_{0}' --PROGRAM_DESC
    , '10' --PROGRAM_SORT_NO
    , '3' --PROGRAM_LEVEL
    , 'mes/production/{0}/{0}Container' --PROGRAM_PATH
    , 'MES_WEB'--PROGRAM_TYPE
    , ''--PROGRAM_PARAMETER
    , ''--NAMESPACE
    , ''--NO_POPUP_FLAG
    , 'Y'--PROGRAM_USE_FLAG
    , 'admin'--CREATION_USER_ID
    , sysdate--CREATION_DATE
    , 'admin'--LAST_UPDATE_USER_ID
    , sysdate--LAST_UPDATE_DATE
    , ''--AUTO_CREATION_FLAG
    , ''--CONFIGURABLE_UI_FLAG
    )
    ]]>
	</add_programId_query>
	<add_auth_query>
		<![CDATA[
    --권한 등록
    insert into TB_MMD_ORG_USR_CLASS_AUTH_N
    values ('255300','SYSTEM_ADMIN','NEW_PROGRAM_ID','W','sysadmin',SYSDATE,'','');

    insert into TB_MMD_ORG_USR_CLASS_AUTH_N
    values ('255301','SYSTEM_ADMIN','NEW_PROGRAM_ID','W','sysadmin',SYSDATE,'','');

    insert into TB_MMD_ORG_USR_CLASS_AUTH_N
    values ('255302','SYSTEM_ADMIN','NEW_PROGRAM_ID','W','sysadmin',SYSDATE,'','');

    insert into TB_MMD_ORG_USR_CLASS_AUTH_N
    values ('255303','SYSTEM_ADMIN','NEW_PROGRAM_ID','W','sysadmin',SYSDATE,'','');

    insert into TB_MMD_ORG_USR_CLASS_AUTH_N
    values ('255305','SYSTEM_ADMIN','NEW_PROGRAM_ID','W','sysadmin',SYSDATE,'','');

    insert into TB_MMD_ORG_USR_CLASS_AUTH_N
    values ('260330','SYSTEM_ADMIN','NEW_PROGRAM_ID','W','sysadmin',SYSDATE,'','');

    insert into TB_MMD_ORG_USR_CLASS_AUTH_N
    values ('280386','SYSTEM_ADMIN','NEW_PROGRAM_ID','W','sysadmin',SYSDATE,'','');

    insert into TB_MMD_ORG_USR_CLASS_AUTH_N
    values ('304056','SYSTEM_ADMIN','NEW_PROGRAM_ID','W','sysadmin',SYSDATE,'','');
    ]]>
	</add_auth_query>
	<controller_code>
		<![CDATA[
    package com.lg.mes.production;

    import lombok.extern.slf4j.Slf4j;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.Map;

    @RestController
    @Slf4j
    public class {0}Controller {{
        @Autowired
        {0}Service service;

    
    }}
    ]]>
	</controller_code>
	<service_code>
		<![CDATA[
    package com.lg.mes.production;

    import org.springframework.http.ResponseEntity;

    import java.util.Map;
	
    public interface {0}Service {{
	/* 
        ResponseEntity Temp1(Map<String, Object> params) throws Exception;
        ResponseEntity Temp2(String param) throws Exception;    
	*/
    }}
    ]]>
	</service_code>
	<implement_code>
		<![CDATA[
    package com.lg.mes.production;

    import com.lg.common.solace.SolaceService;
    import com.lg.common.util.CommonUtil;
    import lombok.extern.slf4j.Slf4j;
    import org.slf4j.MDC;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;

    import java.text.SimpleDateFormat;
    import java.util.HashMap;
    import java.util.Map;

    @Service
    @Slf4j
    public class {0}ServiceImpl implements {0}Service {{

        @Autowired
        private SolaceService solaceService;

		/*
        @Override
        public ResponseEntity Temp1(String param) throws Exception {{
            Map<String,Object> inData = new HashMap<>();
            inData.put("LANGUAGE_ID", MDC.get("userLangID"));
            inData.put("SCHEDULE_GROUP_ID", param);

            Map<String,Object> result =
                    solaceService.bizActorRequestMap(
                            inData,
                            "IN_DATA",
                            "OUT_DATA",
                            "BR_MMD_WipLineM_SelectCombo");

            return CommonUtil.successResponseData(result);
        }}
		*/
    }}
    ]]>
	</implement_code>
	<grid_col>
		<![CDATA[{{binding: '{0}',header: langUtils.getLangData(langSet.object,'{0}','{0}',),width: 50,visible: {1},}},]]>
	</grid_col>
	<js_search_area>
		<![CDATA[import React, {{
  useState,
  useContext,
  useEffect,
  useCallback,
  useRef,
}} from 'react';
import commonFunc from '../../../common/components/commonFunc';
import * as wijmo from '@grapecity/wijmo';
import {{ useDispatch }} from 'react-redux';
import * as wjInput from '@grapecity/wijmo.react.input';
// 다국어
import {{ MultiLangContext, langUtils }} from 'ecm_app_commonlib';
import {{ MultiDatePicker, showMessage }} from 'ecm_app_commonlib';
import {0}Service from '../services/{0}Service';
import produce from 'immer';
import CommonSearchComponent from '../../../common/components/CommonSearchComponent';
import CommonSearchItemComponent from '../../../common/components/CommonSearchItemComponent';
import OrgSchGroupComponent from '../../../common/components/OrgSchGroupComponent';
import {{
  defaultMessage,
  schCondCode,
}} from '../../../common/components/CommonVariables'; //공통조회조건

const SearchAreaComponent = (props) => {{
  const [searchParams, setSearchParams] = useState({{}});
  const [initComplete, setInitComplete] = useState(false);

  //월별,주별 조건
  const [dateType, setDateType] = useState('M');
  const assignDateType = (data) => {{
    dateTypeSTRef.current = data;
    setDateType(data);
  }};
  const dateTypeSTRef = useRef(dateType);  
  const onDateTypeChanged = (e) => assignDateType(e);

  /* 생산라인 component ref */
  const productLineRef = useRef();
  
  /* 생산라인 콤보 데이터 */
  const [productLineCboData, setProductLineCboData] = useState([]);
  const assignProductLineCboData = (data) => {{
    productLineCboDataSTRef.current = data;
    assignSelectedProductLine(data.filter((item) => item.SELECTED == true));
    setProductLineCboData(data);
  }};
  const productLineCboDataSTRef = useRef(productLineCboData);

  /* 생산라인 selected value */
  const [selectedProductLine, setSelectedProductLine] = useState([]);
  const assignSelectedProductLine = (data) => {{
    selectedProductLineSTRef.current = data;
    setSelectedProductLine(data);
  }};
  const selectedProductLineSTRef = useRef(selectedProductLine);

  /* PRODUCT_SPECIFICATION_ID (Model Suffix) */
  const [productSpecificationId, setProductSpecificationId] = useState('');
  const assignProductSpecificationId = (data) => {{
    productSpecificationIdSTRef.current = data;
    setProductSpecificationId(data);
  }};
  const productSpecificationIdSTRef = useRef(productSpecificationId);

  //wo
  const [workOrderName, setWorkOrderName] = useState('');
  const assignWorkOrderName = (data) => {
    workOrderNameSTRef.current = data;
    setWorkOrderName(data);
  };
  const workOrderNameSTRef = useRef(workOrderName);

  /* 공통 조회 comp */
  const [comSrchCompParameters, setComSrchCompParameters] = useState(null);
  const assignComSrchCompParameters = (data) => {{
    comSrchCompParametersSTRef.current = data;
    setComSrchCompParameters(data);
  }};
  const comSrchCompParametersSTRef = useRef(comSrchCompParameters);

  //Organization, Schedule Group Ref
  const orgSchGrpCompRef = useRef();
  //CommonSearchComponent Ref
  const comSrchCompRef = useRef();
  const dtpMultiDateRef = useRef();
  

  useEffect(() => {{
    if (!initComplete) return;

    applyComSrchCompParameters();
  }}, [comSrchCompParameters]);

  /**
   * Product Line Combo data 조회
   */
  const retrieveProductLineData = async () => {{
    if (orgSchGrpCompRef?.current == null) return;

    const scheduleGroupDatas = orgSchGrpCompRef.current.getScheduleGroup();
    const param = scheduleGroupDatas.length == 0 ? '' : scheduleGroupDatas;

    const response = await service.getWipLineM(param);
    if (applyFlagSTRef.current) {{
      if (comSrchCompParametersSTRef.current) {{
        assignProductLineCboData(
          response.data.map((item) => {{
            if (
              comSrchCompParametersSTRef.current[schCondCode.productionLine]
                .split(',')
                .includes(item.WIP_LINE_ID)
            ) {{
              item.SELECTED = true;
            }}
            return item;
          }}),
        );
        assignApplyFlag(false);
      }}
    }} else {{
      assignProductLineCboData(
        response.data.map((item) => {{
          item.SELECTED = true;
          return item;
        }}),
      );
    }}
  }};

  const onOrgSchGroupCompInitilized = async () => {{
    await retrieveProductLineData();
    applyComSrchCompParameters();
    setInitComplete(true);
  }};

  const dispatch = useDispatch();
  let LangSet = useContext(MultiLangContext);
  const service = new {0}Service(dispatch, LangSet);

  const currentParam = () =>
    produce(searchParams, (draft) => {{
      draft[schCondCode.organization] =
        orgSchGrpCompRef.current.getOrganization();
      draft[schCondCode.scheduleGroup] =
        orgSchGrpCompRef.current.getScheduleGroup();
      draft[schCondCode.facility] = orgSchGrpCompRef.current.getFacility();
      draft[schCondCode.dateType] = dateTypeSTRef.current;
      draft[schCondCode.productionLine] = selectedProductLineSTRef.current
        .map((x) => x.WIP_LINE_ID)
        .toString();
      draft[schCondCode.productionSpecId] = productSpecificationIdSTRef.current;
      draft[schCondCode.workOrder] = workOrderNameSTRef.current;	  
    
	  /* to-do: implement other conditions */
    if (isSearchClicked) {{
        let sDt = wijmo.Globalize.format(
          dtpMultiDateRef.current.getStartDateTime(),
          'yyyyMMdd',
        );
        let eDt = wijmo.Globalize.format(
          dtpMultiDateRef.current.getEndDateTime(),
          'yyyyMMdd',
        );
        draft[schCondCode.startDate] = sDt;
        draft[schCondCode.endDate] = eDt;
      }}

    }});

  const onUpdatedParameter = (param) => {{
    if (param) {{
      assignComSrchCompParameters(param);
      if (!param[schCondCode.applyFlag]) {{
        props.updateSearch(param);
      }}
    }}
  }};

  //Menu Paramete Received Event
  const onReceivedParameter = (param) => {{}};

  const onConditionSetting = () => {{
    //Setting Current Parameter
    comSrchCompRef.current.settingCurrentCondition(currentParam(false));
  }};

  //즐겨찾기 검색여부
  const [applyFlag, setApplyFlag] = useState(false);
  const assignApplyFlag = (data) => {{
    applyFlagSTRef.current = data;
    setApplyFlag(data);
  }};
  const applyFlagSTRef = useRef(applyFlag);

  const applyComSrchCompParameters = async () => {{
    if (!comSrchCompParametersSTRef.current) return;

    var param = comSrchCompParametersSTRef.current;
    orgSchGrpCompRef.current.setOrgSchGrData(
      param[schCondCode.organization],
      param[schCondCode.scheduleGroup],
    );    
    
    assignProductSpecificationId(param[schCondCode.productionSpecId]);
    assignWorkOrderName(param[schCondCode.workOrder]);
	
    if (productLineCboDataSTRef.current.length > 0) {{
      productLineRef.current.checkedItems =
        productLineCboDataSTRef.current.filter((x) =>
          param[schCondCode.productionLine].split(',').includes(x.WIP_LINE_ID),
        );
    }}

    assignApplyFlag(param[schCondCode.applyFlag]);
  }};

  const onSearchClick = () => {{
    comSrchCompRef.current.updateSearchParameter(currentParam(true));
  }};

  const onOrgSchGroupChanged = async () => {{
    await retrieveProductLineData();
  }};  

  return (
    <>
      <CommonSearchComponent
        {{...props}}
        ref={{comSrchCompRef}}
        isShowSearchButton={{true}}
        isMngCondition={{true}}
        onSearchClick={{onSearchClick}}
        onUpdatedParameter={{onUpdatedParameter}}
        onReceivedParameter={{onReceivedParameter}}
        onConditionSetting={{onConditionSetting}}
      >
        {{/* 공통 Organization, Schedule Group */}}
        <CommonSearchItemComponent
          isMandantory={{false}}
          title={{langUtils.getLangData(LangSet.object, 'Schedule Group')}}
        >
          <OrgSchGroupComponent
            ref={{orgSchGrpCompRef}}
            onInitilized={{onOrgSchGroupCompInitilized}}
            onChangedScheduleGroups={{onOrgSchGroupChanged}}
          ></OrgSchGroupComponent>
        </CommonSearchItemComponent>
        {{/* 월별/주별 Radio */}}
        <CommonSearchItemComponent
          isMandantory={{true}}
          title={{langUtils.getLangData(langSet.object, 'PERIOD_CONDITION')}}
        >
          <div className="form-check" key={{1}}>
            <input
              type="radio"
              className="form-check-input"
              name="PERIOD_OPTION"
              id={{'PERIOD_OPTION_1'}}
              value="M"
              checked={{dateTypeSTRef.current === 'M'}}
              onChange={{onDateTypeChanged}}
            />
            <label htmlFor="PERIOD_OPTION_1">
              {{langUtils.getLangData(langSet.object, 'MONTHLY')}}
            </label>
          </div>
          <div className="form-check" key={{2}}>
            <input
              type="radio"
              className="form-check-input"
              name="PERIOD_OPTION"
              id={{'PERIOD_OPTION_2'}}
              value="W"
              checked={{dateTypeSTRef.current === 'W'}}
              onChange={{onDateTypeChanged}}
            />
            <label htmlFor="PERIOD_OPTION_2">
              {{langUtils.getLangData(langSet.object, 'WEEKLY')}}
            </label>
          </div>
        </CommonSearchItemComponent>        
        {{/* from-to picker */}}
        <CommonSearchItemComponent
          isMandantory={{false}}
          title={{langUtils.getLangData(LangSet.object, 'Period')}}
        >
          <MultiDatePicker
            ref={{dtpMultiDateRef}}
            term={{props.dfTerm ? props.dfTerm : '30d'}}
            changeTrigger="Direct"
            withTime={{false}}
            isRequired={{true}}
            selectionMode={{dateTypeSTRef.current === 'M' ? 'Month' : 'Week'}}
          />
        </CommonSearchItemComponent>
        {{/* Product Line Combo */}}
        <CommonSearchItemComponent
          isMandantory={{false}}
          title={{langUtils.getLangData(LangSet.object, 'Product Line')}}
        >
          <wjInput.MultiSelect
            initialized={{(s) => (productLineRef.current = s)}}
            placeholder={{langUtils.getLangData(LangSet.object, 'Select')}}
            showSelectAllCheckbox={{true}}
            headerFormat={{
              selectedProductLineSTRef.current.length == 0
                ? ''
                : `${{
                    selectedProductLineSTRef.current[0]['WIP_LINE_CODE']
                  }} other ${{selectedProductLineSTRef.current.length - 1}}`
            }}
            displayMemberPath="WIP_LINE_CODE"
            selectedValuePath="WIP_LINE_ID"
            checkedMemberPath="SELECTED"
            itemsSource={{productLineCboData}}
            checkedItemsChanged={{(e) =>
              assignSelectedProductLine(e.checkedItems)
            }}
          ></wjInput.MultiSelect>
        </CommonSearchItemComponent>
        {{/* PRODUCT_SPECIFICATION_ID (Model Suffix) */}}
        <CommonSearchItemComponent
          isMandantory={{false}}
          title={{langUtils.getLangData(LangSet.object, 'PRODUCT_SPECIFICATION_ID')}}
        >
          <input
            type="text"
            value={{productSpecificationIdSTRef.current}}
            onChange={{(e) => assignProductSpecificationId(e.target.value)}}
          ></input>
        </CommonSearchItemComponent>
        {{/* WO Text */}}
        <CommonSearchItemComponent
          isMandantory={{false}}
          title={{langUtils.getLangData(LangSet.object, 'WORK_ORDER_NAME')}}
        >
          <input
            type="text"
            value={{workOrderNameSTRef.current}}
            onChange={{(e) => assignWorkOrderName(e.target.value)}}
          ></input>
        </CommonSearchItemComponent>
      </CommonSearchComponent>
    </>
  );
}};

export default SearchAreaComponent;
    ]]>
	</js_search_area>
	<js_result_area>
		<![CDATA[import React, {{ useEffect, useState, useRef, useContext }} from 'react';
import {{ useDispatch, useSelector }} from 'react-redux';
import {{ MultiLangContext, langUtils, CommonGridContextMenu, showMessage, }} from 'ecm_app_commonlib';
import * as wijmo from '@grapecity/wijmo';
import {{ CollectionView }} from '@grapecity/wijmo';
import * as wjGrid from '@grapecity/wijmo.react.grid';
import * as wjInput from '@grapecity/wijmo.react.input';
import {0}Service from '../services/{0}Service';
import commonFunc from '../../../common/components/commonFunc';
import {{ Form }} from 'react-bootstrap';
import SlideAreaComponent from '../../../common/components/SlideAreaComponent';
import {{
  defaultMessage,
  schCondCode,
}} from '../../../common/components/CommonVariables';
import CommonExcelButton from '../../../common/components/CommonExcelButton';

const ResultAreaComponent = (props) => {{
  let _ = require('lodash');

  const [grid, setGrid] = useState();
  const assignGrid = (data) => {{
    gridSTRef.current = data;
    setGrid(data);
  }};
  const gridSTRef = useRef(grid);

  const [gridData, setGridData] = useState([]);
  const assignGridData = (data) => {{
    gridDataSTRef.current = data;
    setGridData(data);
  }};
  const gridDataSTRef = useRef(gridData);

  let langSet = useContext(MultiLangContext);

  const getDefaultColumns = () => {{
    /* to-do: implement */
    return [];
  }};

  const dispatch = useDispatch();
  // const [gridData, setGridData] = useState([]);
  const service = new {0}Service(dispatch, langSet);
  const [gridRowCnt, setGridRowCnt] = useState(0);
  const [gridColumns, setGridColumns] = useState(getDefaultColumns());

  const refGrid = useRef(null);
  const refContextMenu = useRef(null);  

  useEffect(() => {{
    if (!props.searchParams) return;

    retrieveData();
  }}, [props.searchParams]);

  useEffect(() => {{
    if (!gridData.length) return;

    grid.autoSizeColumns();
  }}, [gridData]);    

  /**
   * 조회
   * @returns
   */
  const retrieveData = async () => {{
    /* to-do: implement */
	/* 
    const response = await service.getIQCRepairSelect({{
      FROM_DATE: props.searchParams[schCondCode.startDate],
      TO_DATE: props.searchParams[schCondCode.startDate],
      WIP_LINE_ID: props.searchParams[schCondCode.productionLine] ?? '',
      PRODUCT_SPECIFICATION_ID:
        props.searchParams[schCondCode.productionSpecId],
      WORK_ORDER_NAME: props.searchParams[schCondCode.workOrder],
    }});
	*/

    if (!response.data) {{
      return;
    }}

    const data = response.data;
    setGridData(data);
    const rowCount = wijmo.Globalize.format(response.data.length, 'n0');
    setGridRowCnt(rowCount);
    showMessage(
      dispatch,
      'ALL',
      langUtils.getLangData(langSet.message, 'COM006', null, rowCount),
    );
  }};

  const onGridInitialized = (s) => {{
    assignGrid(s);
    s.autoSizeColumns();
  }};

  return (
    <React.Fragment>
      <div className="flex_align_l">
        <h3>
		      {{/* to-do: implement */}}
          {{langUtils.getLangData(langSet.object, '', '')}}
          <span className="num_txt">{{gridRowCnt}}</span>
        </h3>
        <div className="flex_align_r wid100 gutter8">
          <CommonExcelButton  {{...props}}   refContextMenu = {{refContextMenu}} ></CommonExcelButton>
        </div>        
      </div>
      <div className="flex_align_row wid100" style={{{ height: '50px' }}}>
        <wjGrid.FlexGrid
          id="fGrid"
          itemFormatter={{itemFormatter}}
		      {{/* to-do: implement */}}
          selectionMode="Cell"
          itemsSource={{gridData}}
          itemsSourceChanged={{(s, e) => s.autoSizeColumns()}}
          initialized={{onGridInitialized}}
          loadedRows={{(s) => s.autoSizeColumns()}}
          ref={{refGrid}}
        >
          <wjGrid.FlexGridCellTemplate
            cellType="RowHeader"
            template={{commonFunc.gridHeadertemplateFunc}}
          />        
          {{/* check */}}
          <wjGrid.FlexGridColumn
            header=" "
            binding="active"
            allowResizing={{true}}
            visible={{true}}
            width={{45}}
          />
        </wjGrid.FlexGrid>
        <CommonGridContextMenu 
          {{...props} }
          ref = {{refContextMenu} }
          refGrid={{refGrid}}
          id={{"gridContext"}} 
          isLayoutSetting={{false}}
          isLayoutSave={{true}} 
          isExcelExportTemplate={{false}}>
        </CommonGridContextMenu>
      </div>
    </React.Fragment>
  );
}};

export default ResultAreaComponent;
    ]]>
	</js_result_area>
	<js_service>
		<![CDATA[import {{ BaseService }} from 'ecm_app_commonlib';
import {{ SessionService }} from 'ecm_app_commonlib';

export default class {0}Service {{
  constructor(dispatch, LangSet) {{
    this.baseService = new BaseService(dispatch, LangSet);
    this.sessionService = new SessionService();
  }}
  
  /**
   * ProductLine
   * @returns
   */
  async getWipLineM(ids) {{
    let response;
    const method = 'POST';
    const url = '/api/production/getWipLineM';
    const body = JSON.stringify({{
      SCHEDULE_GROUP_ID: ids,
    }});
    console.log('object', body);
    try {{
      this.baseService.setAuthorization(
        this.sessionService.getSessionStorageValue('user'),
      );
      response = await this.baseService.fnRest(method, url, body);
    }} catch (error) {{
      response = error;
    }}
    return response.data;
  }}  
  /* to-do: implement */
}}
    ]]>
	</js_service>
	<js_container>
		<![CDATA[import React, {{ useEffect, useState, useRef }} from 'react';
import ResultAreaComponent from './components/ResultAreaComponent.jsx';
import SearchAreaComponent from './components/SearchAreaComponent';
import {{ LayoutContainer }} from 'ecm_app_commonlib';

const {0}Container = (props) => {{
  const [searchParams, setSearchParams] = useState(null);

  useEffect(() => {{}}, []);

  const updateSearch = (params) => {{
    setSearchParams(params);
  }};
  return (
    <LayoutContainer
      {{...props}}
      SearchContainer={{
        <SearchAreaComponent
          {{...props}}
          updateSearch={{updateSearch}}
        ></SearchAreaComponent>
      }}
      ContentsContainer={{
        <ResultAreaComponent {{...props}} searchParams={{searchParams}} />
      }}
    ></LayoutContainer>
  );
}};
export default {0}Container;
    ]]>
	</js_container>
</codes>
